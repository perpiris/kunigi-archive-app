// <auto-generated />
using System;
using KunigiArchive.Application.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace KunigiArchive.Application.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250623183445_rename mastergame title")]
    partial class renamemastergametitle
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("KunigiArchive.Domain.Entities.ApplicationRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("KunigiArchive.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("KunigiArchive.Domain.Entities.Game", b =>
                {
                    b.Property<long>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("GameId"));

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<long>("GameTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("LogoLink")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<long>("MasterGameId")
                        .HasColumnType("bigint");

                    b.Property<string>("SubTitle")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Title")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("GameId");

                    b.HasIndex("GameTypeId");

                    b.HasIndex("MasterGameId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("KunigiArchive.Domain.Entities.GameMediaFile", b =>
                {
                    b.Property<long>("GameId")
                        .HasColumnType("bigint");

                    b.Property<long>("MediaFileId")
                        .HasColumnType("bigint");

                    b.HasKey("GameId", "MediaFileId");

                    b.HasIndex("MediaFileId");

                    b.ToTable("GameMediaFiles");
                });

            modelBuilder.Entity("KunigiArchive.Domain.Entities.GameType", b =>
                {
                    b.Property<long>("GameTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("GameTypeId"));

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("GameTypeId");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("GameTypes");
                });

            modelBuilder.Entity("KunigiArchive.Domain.Entities.MasterGame", b =>
                {
                    b.Property<long>("MasterGameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("MasterGameId"));

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<long>("HostTeamId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<string>("LogoLink")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("OrderTitle")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Title")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<long>("WinnerTeamId")
                        .HasColumnType("bigint");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("MasterGameId");

                    b.HasIndex("HostTeamId");

                    b.HasIndex("WinnerTeamId");

                    b.HasIndex("Year")
                        .IsUnique();

                    b.ToTable("MasterGames");
                });

            modelBuilder.Entity("KunigiArchive.Domain.Entities.MasterGameMediaFile", b =>
                {
                    b.Property<long>("MasterGameId")
                        .HasColumnType("bigint");

                    b.Property<long>("MediaFileId")
                        .HasColumnType("bigint");

                    b.HasKey("MasterGameId", "MediaFileId");

                    b.HasIndex("MediaFileId");

                    b.ToTable("MasterGameMediaFiles");
                });

            modelBuilder.Entity("KunigiArchive.Domain.Entities.MediaFile", b =>
                {
                    b.Property<long>("MediaFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("MediaFileId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.HasKey("MediaFileId");

                    b.ToTable("MediaFiles");
                });

            modelBuilder.Entity("KunigiArchive.Domain.Entities.Puzzle", b =>
                {
                    b.Property<long>("PuzzleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("PuzzleId"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<long>("GameId")
                        .HasColumnType("bigint");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.HasKey("PuzzleId");

                    b.HasIndex("GameId");

                    b.ToTable("Puzzles");
                });

            modelBuilder.Entity("KunigiArchive.Domain.Entities.PuzzleMediaFile", b =>
                {
                    b.Property<long>("PuzzleId")
                        .HasColumnType("bigint");

                    b.Property<long>("MediaFileId")
                        .HasColumnType("bigint");

                    b.Property<string>("FileType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("PuzzleId", "MediaFileId", "FileType");

                    b.HasIndex("MediaFileId");

                    b.ToTable("PuzzleMediaFiles");
                });

            modelBuilder.Entity("KunigiArchive.Domain.Entities.Team", b =>
                {
                    b.Property<long>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("TeamId"));

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("FacebookLink")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("InstagramLink")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<string>("LogoLink")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .UseCollation("el-GR-x-icu");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WebsiteLink")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<short?>("YearFounded")
                        .HasColumnType("smallint");

                    b.Property<string>("YoutubeLink")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("TeamId");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("KunigiArchive.Domain.Entities.TeamManager", b =>
                {
                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<long>("ApplicationUserId")
                        .HasColumnType("bigint");

                    b.HasKey("TeamId", "ApplicationUserId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("TeamManagers");
                });

            modelBuilder.Entity("KunigiArchive.Domain.Entities.TeamMediaFile", b =>
                {
                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<long>("MediaFileId")
                        .HasColumnType("bigint");

                    b.HasKey("TeamId", "MediaFileId");

                    b.HasIndex("MediaFileId");

                    b.ToTable("TeamMediaFiles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("KunigiArchive.Domain.Entities.Game", b =>
                {
                    b.HasOne("KunigiArchive.Domain.Entities.GameType", "GameType")
                        .WithMany("Games")
                        .HasForeignKey("GameTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KunigiArchive.Domain.Entities.MasterGame", "MasterGame")
                        .WithMany("Games")
                        .HasForeignKey("MasterGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameType");

                    b.Navigation("MasterGame");
                });

            modelBuilder.Entity("KunigiArchive.Domain.Entities.GameMediaFile", b =>
                {
                    b.HasOne("KunigiArchive.Domain.Entities.Game", "Game")
                        .WithMany("MediaFiles")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KunigiArchive.Domain.Entities.MediaFile", "MediaFile")
                        .WithMany("GameMediaFiles")
                        .HasForeignKey("MediaFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("MediaFile");
                });

            modelBuilder.Entity("KunigiArchive.Domain.Entities.MasterGame", b =>
                {
                    b.HasOne("KunigiArchive.Domain.Entities.Team", "HostTeam")
                        .WithMany()
                        .HasForeignKey("HostTeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KunigiArchive.Domain.Entities.Team", "WinnerTeam")
                        .WithMany()
                        .HasForeignKey("WinnerTeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("HostTeam");

                    b.Navigation("WinnerTeam");
                });

            modelBuilder.Entity("KunigiArchive.Domain.Entities.MasterGameMediaFile", b =>
                {
                    b.HasOne("KunigiArchive.Domain.Entities.MasterGame", "MasterGame")
                        .WithMany("MediaFiles")
                        .HasForeignKey("MasterGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KunigiArchive.Domain.Entities.MediaFile", "MediaFile")
                        .WithMany("MasterGameMediaFiles")
                        .HasForeignKey("MediaFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MasterGame");

                    b.Navigation("MediaFile");
                });

            modelBuilder.Entity("KunigiArchive.Domain.Entities.Puzzle", b =>
                {
                    b.HasOne("KunigiArchive.Domain.Entities.Game", "Game")
                        .WithMany("Puzzles")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("KunigiArchive.Domain.Entities.PuzzleMediaFile", b =>
                {
                    b.HasOne("KunigiArchive.Domain.Entities.MediaFile", "MediaFile")
                        .WithMany("PuzzleMediaFiles")
                        .HasForeignKey("MediaFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KunigiArchive.Domain.Entities.Puzzle", "Puzzle")
                        .WithMany("MediaFiles")
                        .HasForeignKey("PuzzleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MediaFile");

                    b.Navigation("Puzzle");
                });

            modelBuilder.Entity("KunigiArchive.Domain.Entities.TeamManager", b =>
                {
                    b.HasOne("KunigiArchive.Domain.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany("ManagedTeams")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KunigiArchive.Domain.Entities.Team", "Team")
                        .WithMany("Managers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("KunigiArchive.Domain.Entities.TeamMediaFile", b =>
                {
                    b.HasOne("KunigiArchive.Domain.Entities.MediaFile", "MediaFile")
                        .WithMany("TeamMediaFiles")
                        .HasForeignKey("MediaFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KunigiArchive.Domain.Entities.Team", "Team")
                        .WithMany("MediaFiles")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MediaFile");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.HasOne("KunigiArchive.Domain.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.HasOne("KunigiArchive.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.HasOne("KunigiArchive.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.HasOne("KunigiArchive.Domain.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KunigiArchive.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.HasOne("KunigiArchive.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KunigiArchive.Domain.Entities.ApplicationUser", b =>
                {
                    b.Navigation("ManagedTeams");
                });

            modelBuilder.Entity("KunigiArchive.Domain.Entities.Game", b =>
                {
                    b.Navigation("MediaFiles");

                    b.Navigation("Puzzles");
                });

            modelBuilder.Entity("KunigiArchive.Domain.Entities.GameType", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("KunigiArchive.Domain.Entities.MasterGame", b =>
                {
                    b.Navigation("Games");

                    b.Navigation("MediaFiles");
                });

            modelBuilder.Entity("KunigiArchive.Domain.Entities.MediaFile", b =>
                {
                    b.Navigation("GameMediaFiles");

                    b.Navigation("MasterGameMediaFiles");

                    b.Navigation("PuzzleMediaFiles");

                    b.Navigation("TeamMediaFiles");
                });

            modelBuilder.Entity("KunigiArchive.Domain.Entities.Puzzle", b =>
                {
                    b.Navigation("MediaFiles");
                });

            modelBuilder.Entity("KunigiArchive.Domain.Entities.Team", b =>
                {
                    b.Navigation("Managers");

                    b.Navigation("MediaFiles");
                });
#pragma warning restore 612, 618
        }
    }
}
